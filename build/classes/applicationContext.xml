<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"	
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/aop 
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   http://www.springframework.org/schema/jee
   http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.0.xsd">
               
	<!-- 配置属性文件路径 -->
	<context:property-placeholder location="classpath:config/jdbc.properties" />  
	
	<!-- 配置数据源 -->   
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/test"/>
		<property name="username" value="root"/>
		<property name="password" value=""/>
	</bean>
	
	<!-- 
    	***************************************************************************************
    	*									配置JDB相关信息									  *
    	***************************************************************************************
     -->
	<!-- 提供JDBC模版 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
       <property name="dataSource" ref="dataSource"/>
    </bean>	
    
    <!-- 提供JDBC 事务管理 -->
    <bean id="jdbcTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" lazy-init="true">
		<property name="dataSource"><ref local="dataSource"/></property>
	</bean>
	
	<!-- 拦截代理对象，为了给业务逻辑对象增加事务处理 -->
	<!-- 
	transactionAttributes属性可以设置事务处理的方式，事务隔离级别，是否只读三个属性，用逗号隔开
	事务隔离级别各数据库系统不完全支持，一般不设置，用默认的即可
	事务处理选项有如下几个：（前面2个常用）
	PROPAGATION_REQUIRED － 需要事务处理。如果当前不存在事务环境，则创建一个
	PROPAGATION_SUPPORTS － 如果当前存在事务环境，则作为其中的一部分。如果不存在，则按非事务方式执行
	PROPAGATION_REQUIRES_NEW － 需要事务处理。并总是开启一个新事务。如果已经存在事务环境，则挂起之
	PROPAGATION_MANDATORY － 执行到指定方法时，必须已经存在事务环境，否则出错
	PROPAGATION_NEVER － 不支持事务操作，如果存在事务环境会出错
	PROPAGATION_NOT_SUPPORTED － 不支持事务操作。如果存在事务，则挂起
	-->	
	<bean id="jdbcTxProxy" abstract="true" lazy-init="true" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" >		
         <property name="transactionManager">
       	 <ref bean="jdbcTransactionManager"/>
        </property>  
        <property name="transactionAttributes">
            <props>
            	<prop key="validate*">PROPAGATION_NOT_SUPPORTED,readOnly</prop>
                <prop key="find*">PROPAGATION_NOT_SUPPORTED,readOnly</prop>
                <prop key="save*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="del*">PROPAGATION_REQUIRED</prop>
                <prop key="*">PROPAGATION_NOT_SUPPORTED,readOnly</prop>
            </props>
        </property>    
    </bean>
	
	 <!-- 
    	***************************************************************************************
    	*									配置Hibernate相关信息								  *
    	***************************************************************************************
     -->
	<!-- 配置hibernate对lob的支持 -->
    <bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor" lazy-init="true" />
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler" lazy-init="true">
		<property name="nativeJdbcExtractor">
			<ref local="nativeJdbcExtractor" />
		</property>
	</bean>
	
	<!-- 配置Hibernate模版 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	
<!-- 	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"> -->
	<bean id="sessionFactory" class="com.framework.listener.NewSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mappingLocations">
		    <list> 
		      <value>classpath*:com/gps/model/*.hbm.xml</value>	
		      <value>classpath*:com/gps808/model/*.hbm.xml</value>	
		      <value>classpath*:com/gps/system/model/*.hbm.xml</value>	 
		      <value>classpath*:com/gps/user/model/*.hbm.xml</value>
		      <value>classpath*:com/gps/report/model/*.hbm.xml</value>	 
		      <value>classpath*:com/gps/vehicle/model/*.hbm.xml</value>
		      <value>classpath*:com/gps/api/model/*.hbm.xml</value>
		      <value>classpath*:com/gz/system/model/*.hbm.xml</value>
		    </list>			
		</property>
		<!-- 配置Hibernate属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.jdbc.fetch_size">30</prop>
				<prop key="hibernate.jdbc.batch_size">30</prop>
				<prop key="hibernate.default_batch_fetch_size">16</prop>
				<prop key="hibernate.connection.release_mode">after_transaction</prop>
<!-- 				<prop key="hibernate.hbm2ddl.auto">update</prop> -->
			</props>
		</property>
		<!-- 配置事件监听 -->
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
				</entry>
			</map>
		</property>
		<property name="lobHandler" ref="lobHandler"/><!-- 配置对lob的支持 -->
	</bean>
	
	<!-- 提供hibernate 事务管理  -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 指定使用cglib -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置事务的切入点 -->
	<aop:config>
		<aop:pointcut id="targetMethod" expression="execution(* com.wekomp..service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="targetMethod" />
	</aop:config>
	
	<!-- 用户的密码加密或解密 -->
	<bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
		
	<!-- 定义上下文返回的消息的国际化。（新版本） 11/3/23-->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename"
			value="classpath:org/springframework/security/messages_zh_CN"/>
	</bean> 
	
	<!-- 通用模块	-->
	<import resource="spring/applicationContext-common.xml"/>
	<!-- 后台管理	-->
	<import resource="spring/applicationContext-system.xml"/>
	<!-- 用户模块	-->
	<import resource="spring/applicationContext-user.xml"/>
	<!-- 车辆参数 -->
	<import resource="spring/applicationContext-vehicle.xml"/>
	<!-- 车辆报表 -->
	<import resource="spring/applicationContext-report.xml"/>
	<!-- 轨迹回放 -->
	<import resource="spring/applicationContext-track.xml"/>
	<!-- 地图监控 -->
	<import resource="spring/applicationContext-monitor.xml"/>
	<!-- 808模块 -->
	<import resource="spring/applicationContext-gps808-operationManagement.xml"/>
	<import resource="spring/applicationContext-gps808-report.xml"/>
	<import resource="spring/applicationContext-gps808-rule.xml"/>
	<import resource="spring/applicationContext-gps808-track.xml"/>
	<import resource="spring/applicationContext-gps808-monitor.xml"/>
	<import resource="spring/applicationContext-gps808-videoTrack.xml"/>
	<!-- 开发API -->
	<import resource="spring/applicationContext-api.xml"/>
	<import resource="spring/applicationContext-gzbkuser.xml"/>
	<import resource="spring/applicationContext-gps808-api.xml"/>
	
	
	<!-- IPC模块 -->
	<!--
	<import resource="spring/applicationContext-gmonitor.xml"/>
	-->
	<bean id="myServletContextListener" class="com.framework.listener.MyServletContextListener"/>
</beans>